package middleware

import (
	"context"
	"errors"
	"fmt"
	"runtime/debug"

	"github.com/sirupsen/logrus"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"gw-exchanger/internal/errs"
)

// UnaryErrorInterceptor - middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
func UnaryErrorInterceptor(logger *logrus.Logger) grpc.UnaryServerInterceptor {
	return func(
		ctx context.Context,
		req interface{},
		info *grpc.UnaryServerInfo,
		handler grpc.UnaryHandler,
	) (resp interface{}, err error) {
		resp, err = handler(ctx, req)
		if err != nil {
			// –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
			knownErrors := map[error]codes.Code{
				errs.ErrNoRows:               codes.NotFound,
				errs.ErrUnsupportedInputCurr: codes.NotFound,
				errs.ErrUnsupportedOutputCur: codes.NotFound,
			}

			// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –∫–∞–∫ –µ—Å—Ç—å
			for knownErr, grpcCode := range knownErrors {
				if errors.Is(err, knownErr) {
					return nil, status.Errorf(grpcCode, err.Error())
				}
			}

			// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
			logger.WithFields(logrus.Fields{
				"method":      info.FullMethod,
				"error":       fmt.Sprintf("%v", err),
				"stack_trace": string(debug.Stack()), // –ü–æ–ª—É—á–∞–µ–º stack trace
			}).Error("‚ùå Unhandled gRPC error")
			return nil, status.Errorf(codes.Internal, "internal server error")
		}

		return resp, nil
	}
}

// RecoveryInterceptor - middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–Ω–∏–∫–∏
func RecoveryInterceptor(logger *logrus.Logger) grpc.UnaryServerInterceptor {
	return func(
		ctx context.Context,
		req interface{},
		info *grpc.UnaryServerInfo,
		handler grpc.UnaryHandler,
	) (resp interface{}, err error) {
		defer func() {
			if r := recover(); r != nil {
				logger.WithFields(logrus.Fields{
					"method":      info.FullMethod,
					"panic":       r,
					"stack_trace": string(debug.Stack()),
				}).Error("üî• Panic recovered in gRPC handler")

				err = status.Errorf(codes.Internal, "unexpected server error")
			}
		}()
		return handler(ctx, req)
	}
}
