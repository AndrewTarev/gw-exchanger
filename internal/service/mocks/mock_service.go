// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "gw-exchanger/internal/storage/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExchangeService is a mock of ExchangeService interface.
type MockExchangeService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeServiceMockRecorder
}

// MockExchangeServiceMockRecorder is the mock recorder for MockExchangeService.
type MockExchangeServiceMockRecorder struct {
	mock *MockExchangeService
}

// NewMockExchangeService creates a new mock instance.
func NewMockExchangeService(ctrl *gomock.Controller) *MockExchangeService {
	mock := &MockExchangeService{ctrl: ctrl}
	mock.recorder = &MockExchangeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeService) EXPECT() *MockExchangeServiceMockRecorder {
	return m.recorder
}

// GetExchangeRates mocks base method.
func (m *MockExchangeService) GetExchangeRates(ctx context.Context, baseCurrency string) (models.ExchangeRateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRates", ctx, baseCurrency)
	ret0, _ := ret[0].(models.ExchangeRateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRates indicates an expected call of GetExchangeRates.
func (mr *MockExchangeServiceMockRecorder) GetExchangeRates(ctx, baseCurrency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRates", reflect.TypeOf((*MockExchangeService)(nil).GetExchangeRates), ctx, baseCurrency)
}
